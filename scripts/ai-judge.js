import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';
import { dirname } from 'path';
import dotenv from 'dotenv';
import axios from 'axios';
import MistralClient from '@mistralai/mistralai';

// Obtenir le r√©pertoire actuel
const __filename = fileURLToPath(import.meta.url);
const __dirname = dirname(__filename);

// Charger les variables d'environnement
dotenv.config();

// Initialiser le client Mistral
const mistralClient = process.env.MISTRAL_API_KEY
  ? new MistralClient(process.env.MISTRAL_API_KEY)
  : null;

/**
 * Charge le certificat g√©n√©r√©
 * @returns {Object} Le certificat charg√©
 */
function loadCertificate() {
  const certificatePath = path.resolve(process.cwd(), 'certificate.json');

  if (!fs.existsSync(certificatePath)) {
    throw new Error('Le certificat n\'existe pas. Veuillez d\'abord g√©n√©rer un certificat avec la commande npm run zkp:simple');
  }

  try {
    const certificateContent = fs.readFileSync(certificatePath, 'utf8');
    return JSON.parse(certificateContent);
  } catch (error) {
    throw new Error(`Erreur lors du chargement du certificat: ${error.message}`);
  }
}

/**
 * Charge le texte original du document OCR (si disponible)
 * @returns {string|null} Le texte extrait
 */
function loadOCRText() {
  const extractedTextPath = path.resolve(process.cwd(), 'extracted_text.txt');

  if (fs.existsSync(extractedTextPath)) {
    return fs.readFileSync(extractedTextPath, 'utf8');
  }

  return null;
}

/**
 * V√©rifie les affirmations du certificat avec l'AI Judge
 * @param {Object} certificate - Le certificat √† v√©rifier
 * @param {string|null} originalText - Le texte original du document
 * @returns {Promise<Array>} - Les r√©sultats de v√©rification
 */
async function verifyWithAIJudge(certificate, originalText) {
  console.log('\nüß† AI JUDGE - V√âRIFICATION DES AFFIRMATIONS');

  if (!mistralClient) {
    console.log('‚ö†Ô∏è Cl√© API Mistral non configur√©e. Utilisation de v√©rifications simul√©es.');
    return simulateAIJudgeVerification(certificate);
  }

  const verificationResults = [];

  for (const affirmation of certificate.validatedAffirmations) {
    console.log(`\nüîç V√©rification de l'affirmation: "${affirmation.statement}"`);

    try {
      const verificationResponse = await mistralClient.chat({
        model: "mistral-large-2402",
        messages: [
          {
            role: "system",
            content: `Tu es un juge IA expert juridique charg√© de v√©rifier la validit√© d'affirmations juridiques bas√©es sur un certificat ZKP (Zero Knowledge Proof).

            Les preuves √† z√©ro connaissance (ZKP) sont des preuves cryptographiques qui permettent de prouver qu'une affirmation est vraie sans r√©v√©ler les donn√©es sous-jacentes.

            Ton r√¥le est d'analyser l'affirmation, sa preuve ZKP (hash), et de d√©terminer si la preuve est coh√©rente avec l'affirmation.
            Tu dois √©valuer:
            1. Si l'affirmation est claire et v√©rifiable
            2. Si la preuve ZKP fournie est coh√©rente avec l'affirmation
            3. Si la confiance d√©clar√©e est justifi√©e par la preuve

            R√©ponds au format JSON avec les champs:
            - verification: bool√©en (true si l'affirmation et la preuve sont coh√©rentes)
            - confidence: nombre entre 0 et 1
            - reasoning: explication d√©taill√©e de ton √©valuation
            - recommendation: recommandation d'accepter ou rejeter la preuve`
          },
          {
            role: "user",
            content: `Certificat: ${JSON.stringify(certificate, null, 2)}

            Affirmation √† v√©rifier: "${affirmation.statement}"
            Confiance d√©clar√©e: ${affirmation.confidence}
            Hash ZKP: ${affirmation.zkProofHash}

            ${originalText ? `Document original:\n${originalText}` : ''}

            V√©rifie si cette affirmation et sa preuve ZKP sont coh√©rentes et valides.`
          }
        ]
      });

      const aiResponse = verificationResponse.choices[0].message.content;
      let jsonResponse;

      try {
        // Tenter d'extraire un JSON de la r√©ponse
        const jsonMatch = aiResponse.match(/```json\n([\s\S]*?)\n```/) ||
                          aiResponse.match(/\{[\s\S]*\}/);

        if (jsonMatch) {
          jsonResponse = JSON.parse(jsonMatch[1] || jsonMatch[0]);
        } else {
          throw new Error('Format JSON non trouv√©');
        }
      } catch (jsonError) {
        console.warn(`‚ö†Ô∏è Impossible de parser la r√©ponse JSON: ${jsonError.message}`);
        console.log('R√©ponse brute:', aiResponse);

        // Cr√©er une r√©ponse approximative bas√©e sur le texte
        jsonResponse = {
          verification: aiResponse.toLowerCase().includes('valid') ||
                       aiResponse.toLowerCase().includes('coh√©rent'),
          confidence: aiResponse.toLowerCase().includes('haute') ? 0.9 : 0.7,
          reasoning: aiResponse,
          recommendation: aiResponse.toLowerCase().includes('accept') ? 'Accepter' : 'Examiner'
        };
      }

      const result = {
        statement: affirmation.statement,
        zkProofHash: affirmation.zkProofHash,
        originalConfidence: affirmation.confidence,
        aiVerification: jsonResponse.verification,
        aiConfidence: jsonResponse.confidence,
        reasoning: jsonResponse.reasoning,
        recommendation: jsonResponse.recommendation
      };

      verificationResults.push(result);

      // Afficher le r√©sultat
      console.log(`${jsonResponse.verification ? '‚úÖ' : '‚ùå'} R√©sultat: ${jsonResponse.verification ? 'Valid√©' : 'Rejet√©'} (Confiance: ${jsonResponse.confidence})`);
      console.log(`üí° Recommandation: ${jsonResponse.recommendation}`);

    } catch (error) {
      console.error(`Erreur lors de la v√©rification de l'affirmation: ${error.message}`);

      verificationResults.push({
        statement: affirmation.statement,
        zkProofHash: affirmation.zkProofHash,
        originalConfidence: affirmation.confidence,
        aiVerification: false,
        aiConfidence: 0,
        reasoning: `Erreur de v√©rification: ${error.message}`,
        recommendation: '√âchec de la v√©rification - r√©essayer'
      });
    }
  }

  return verificationResults;
}

/**
 * Simulation de v√©rification AI Judge quand l'API n'est pas disponible
 * @param {Object} certificate - Le certificat √† v√©rifier
 * @returns {Array} - Les r√©sultats de v√©rification simul√©s
 */
function simulateAIJudgeVerification(certificate) {
  const verificationResults = [];

  for (const affirmation of certificate.validatedAffirmations) {
    console.log(`\nüîç Simulation de v√©rification pour: "${affirmation.statement}"`);

    // La v√©rification de validit√© du document
    if (affirmation.statement.includes('valide, sign√©e et tamponn√©e')) {
      const result = {
        statement: affirmation.statement,
        zkProofHash: affirmation.zkProofHash,
        originalConfidence: affirmation.confidence,
        aiVerification: true,
        aiConfidence: 0.95,
        reasoning: 'La preuve ZKP confirme que le document a √©t√© v√©rifi√© comme √©tant valide, sign√© et tamponn√©. Le hash cryptographique fourni correspond √† une preuve valide g√©n√©r√©e par le circuit ZKP.',
        recommendation: 'Accepter'
      };
      verificationResults.push(result);
      console.log(`‚úÖ R√©sultat: Valid√© (Confiance: ${result.aiConfidence})`);
    }
    // La v√©rification de la majorit√©
    else if (affirmation.statement.includes('majeur')) {
      const result = {
        statement: affirmation.statement,
        zkProofHash: affirmation.zkProofHash,
        originalConfidence: affirmation.confidence,
        aiVerification: true,
        aiConfidence: 0.9,
        reasoning: 'La preuve ZKP d√©montre de mani√®re cryptographique que l\'h√©bergeur est bien majeur (plus de 18 ans) sans r√©v√©ler sa date de naissance exacte.',
        recommendation: 'Accepter'
      };
      verificationResults.push(result);
      console.log(`‚úÖ R√©sultat: Valid√© (Confiance: ${result.aiConfidence})`);
    }
    // La v√©rification de l'adresse
    else if (affirmation.statement.includes('adresse')) {
      const isSimplifiedProof = affirmation.zkProofHash === '1';
      const result = {
        statement: affirmation.statement,
        zkProofHash: affirmation.zkProofHash,
        originalConfidence: affirmation.confidence,
        aiVerification: true,
        aiConfidence: isSimplifiedProof ? 0.8 : 0.95,
        reasoning: isSimplifiedProof ?
          'La preuve simplifi√©e (hash = 1) indique que l\'adresse a √©t√© v√©rifi√©e, mais avec une m√©thode simplifi√©e.' :
          'La preuve ZKP indique que l\'adresse de l\'h√©bergeur a √©t√© v√©rifi√©e comme √©tant valide.',
        recommendation: 'Accepter'
      };
      verificationResults.push(result);
      console.log(`‚úÖ R√©sultat: Valid√© (Confiance: ${result.aiConfidence})`);
    }
    // La v√©rification de l'identit√© de l'invit√©
    else if (affirmation.statement.includes('h√©berg√© est correctement identifi√©')) {
      const isSimplifiedProof = affirmation.zkProofHash === '1';
      const result = {
        statement: affirmation.statement,
        zkProofHash: affirmation.zkProofHash,
        originalConfidence: affirmation.confidence,
        aiVerification: true,
        aiConfidence: isSimplifiedProof ? 0.75 : 0.9,
        reasoning: isSimplifiedProof ?
          'La preuve simplifi√©e (hash = 1) indique que l\'identit√© a √©t√© v√©rifi√©e, mais avec une m√©thode simplifi√©e qui v√©rifie uniquement la pr√©sence d\'un nom.' :
          'La preuve ZKP confirme que l\'identit√© de l\'h√©berg√© a √©t√© v√©rifi√©e.',
        recommendation: isSimplifiedProof ? 'Accepter avec r√©serve' : 'Accepter'
      };
      verificationResults.push(result);
      console.log(`‚úÖ R√©sultat: Valid√© (Confiance: ${result.aiConfidence})`);
    }
    // Cas par d√©faut
    else {
      const result = {
        statement: affirmation.statement,
        zkProofHash: affirmation.zkProofHash,
        originalConfidence: affirmation.confidence,
        aiVerification: false,
        aiConfidence: 0.5,
        reasoning: 'Impossible de v√©rifier cette affirmation avec certitude. Le contenu de l\'affirmation n\'est pas clairement identifiable dans les cat√©gories connues.',
        recommendation: 'Examiner manuellement'
      };
      verificationResults.push(result);
      console.log(`‚ùì R√©sultat: Incertain (Confiance: ${result.aiConfidence})`);
    }
  }

  return verificationResults;
}

/**
 * G√©n√®re un rapport de l'AI Judge
 * @param {Object} certificate - Le certificat original
 * @param {Array} verificationResults - Les r√©sultats de v√©rification
 * @returns {Object} - Le rapport final
 */
function generateAIJudgeReport(certificate, verificationResults) {
  // Calculer la confiance globale
  const totalConfidence = verificationResults.reduce((sum, result) => sum + result.aiConfidence, 0);
  const averageConfidence = totalConfidence / verificationResults.length;

  // V√©rifier si toutes les v√©rifications sont pass√©es
  const allVerified = verificationResults.every(result => result.aiVerification);

  // Cr√©er des recommandations
  const recommendations = [];

  if (allVerified && averageConfidence > 0.9) {
    recommendations.push('Ce document peut √™tre consid√©r√© comme hautement fiable.');
  } else if (allVerified && averageConfidence > 0.7) {
    recommendations.push('Ce document est fiable mais certaines preuves pourraient √™tre renforc√©es.');
  } else if (allVerified) {
    recommendations.push('Ce document est acceptable mais pr√©sente des points √† v√©rifier.');
  } else {
    recommendations.push('Ce document pr√©sente des affirmations non v√©rifi√©es qui n√©cessitent une attention particuli√®re.');

    // Ajouter des recommandations sp√©cifiques pour les affirmations non v√©rifi√©es
    const failedVerifications = verificationResults.filter(result => !result.aiVerification);
    for (const failed of failedVerifications) {
      recommendations.push(`Concernant "${failed.statement}": ${failed.recommendation}`);
    }
  }

  // G√©n√©rer le rapport final
  const report = {
    title: "RAPPORT DE L'AI JUDGE - V√âRIFICATION DU CERTIFICAT",
    certificateId: certificate.id || `cert-${Date.now()}`,
    originalDocument: certificate.originalDocument,
    dateVerification: new Date().toISOString(),
    validationSummary: {
      totalAffirmations: verificationResults.length,
      validatedAffirmations: verificationResults.filter(r => r.aiVerification).length,
      averageConfidence: Math.round(averageConfidence * 100) / 100,
      overallStatus: allVerified ? 'VALID√â' : 'PARTIELLEMENT VALID√â'
    },
    detailedResults: verificationResults,
    recommendations,
    legalDisclaimer: "Ce rapport a √©t√© g√©n√©r√© par l'AI Judge, un syst√®me automatis√© d'analyse juridique bas√© sur l'intelligence artificielle. Il ne remplace pas l'avis d'un professionnel du droit."
  };

  // Sauvegarder le rapport
  const reportPath = path.resolve(process.cwd(), 'ai_judge_report.json');
  fs.writeFileSync(reportPath, JSON.stringify(report, null, 2));
  console.log(`\nüìù Rapport de l'AI Judge sauvegard√© dans ${reportPath}`);

  return report;
}

/**
 * Fonction principale
 */
async function main() {
  try {
    console.log("üßë‚Äç‚öñÔ∏è D√©marrage de l'AI Judge - V√©rification du certificat ZKP...");

    // √âtape 1: Charger le certificat
    console.log('\n=== √âTAPE 1: CHARGEMENT DU CERTIFICAT ===');
    const certificate = loadCertificate();
    console.log(`‚úÖ Certificat charg√©: ${certificate.title}`);

    // √âtape 2: Charger le texte original si disponible
    console.log('\n=== √âTAPE 2: CHARGEMENT DU TEXTE ORIGINAL ===');
    const originalText = loadOCRText();
    console.log(`${originalText ? '‚úÖ Texte original charg√©' : '‚ö†Ô∏è Texte original non disponible'}`);

    // √âtape 3: V√©rifier les affirmations avec l'AI Judge
    console.log('\n=== √âTAPE 3: V√âRIFICATION PAR L\'AI JUDGE ===');
    const verificationResults = await verifyWithAIJudge(certificate, originalText);

    // √âtape 4: G√©n√©rer le rapport final
    console.log('\n=== √âTAPE 4: G√âN√âRATION DU RAPPORT ===');
    const report = generateAIJudgeReport(certificate, verificationResults);

    // R√©sum√©
    console.log('\n=== R√âSUM√â DU RAPPORT ===');
    console.log(`Statut global: ${report.validationSummary.overallStatus}`);
    console.log(`Affirmations valid√©es: ${report.validationSummary.validatedAffirmations}/${report.validationSummary.totalAffirmations}`);
    console.log(`Confiance moyenne: ${report.validationSummary.averageConfidence * 100}%`);

    console.log('\nRecommandations:');
    report.recommendations.forEach(rec => console.log(`- ${rec}`));

    console.log('\n‚ú® PROCESSUS DE V√âRIFICATION PAR L\'AI JUDGE TERMIN√â AVEC SUCC√àS ‚ú®');

    return {
      success: true,
      report
    };
  } catch (error) {
    console.error(`Erreur lors du processus de v√©rification par l'AI Judge: ${error.message}`);

    return {
      success: false,
      error: error.message
    };
  }
}

// Ex√©cuter la fonction principale
main().catch(error => {
  console.error('Erreur non g√©r√©e:', error);
  process.exit(1);
});