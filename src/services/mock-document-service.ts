/**
 * Service de g√©n√©ration de documents mock√©s pour les tests
 * Permet de tester l'extraction de texte et la v√©rification de documents sans OCR r√©el
 */

import { extractInfoFromText } from './document-service';

/**
 * Interface repr√©sentant un document mock√©
 */
export interface MockDocument {
  id: string;
  filename: string;
  title: string;
  type: 'contrat' | 'facture' | 'identit√©';
  content: string;
  metadata: Record<string, any>;
}

/**
 * Type de v√©rification √† effectuer sur un document
 */
export type VerificationType =
  | 'validit√©'
  | 'paiement'
  | 'expiration'
  | 'identit√©'
  | 'montant'
  | 'signature';

/**
 * Collection de documents mock√©s pour tests
 */
export const MOCK_DOCUMENTS: MockDocument[] = [
  // Document 1: Facture EDF
  {
    id: 'doc-001',
    filename: 'facture-edf-2023.pdf',
    title: 'Facture EDF',
    type: 'facture',
    content: `
FACTURE D'√âLECTRICIT√â
EDF SA au capital de 1 551 810 543 euros
RCS Paris 552 081 317
Si√®ge social : 22-30, avenue de Wagram 75008 Paris

R√©f√©rence client: EDF23956784
R√©f√©rence facture: F23-78945612
Date d'√©mission: 15/03/2023

Client:
M. DUPONT Jean
123 Rue des Lilas
75020 PARIS

FACTURE DU 15/02/2023 AU 14/03/2023

Consommation: 342 kWh
Prix unitaire HT: 0,1740 ‚Ç¨/kWh
Montant HT: 59,51 ‚Ç¨
TVA (20%): 11,90 ‚Ç¨
MONTANT TOTAL TTC: 71,41 ‚Ç¨

STATUT: PAY√â le 20/03/2023
Mode de paiement: Pr√©l√®vement automatique

Prochain relev√© pr√©vu: 15/04/2023

Service client: 09 69 32 15 15 (appel non surtax√©)
www.edf.fr
    `,
    metadata: {
      dateEmission: '15/03/2023',
      montant: 71.41,
      status: 'PAY√â',
      datePaiement: '20/03/2023',
      reference: 'F23-78945612',
      client: 'DUPONT Jean'
    }
  },

  // Document 2: Contrat de location
  {
    id: 'doc-002',
    filename: 'contrat-location-2023.pdf',
    title: 'Contrat de location',
    type: 'contrat',
    content: `
CONTRAT DE LOCATION
(Loi n¬∞ 89-462 du 6 juillet 1989)

ENTRE LES SOUSSIGN√âS:

BAILLEUR:
SCI HABITAT PARIS
35 Avenue Victor Hugo
75016 PARIS
SIRET: 78945612300014

ET

LOCATAIRE:
Mme MARTIN Sophie
n√©e le, 12/04/1985 √† Lyon
Carte d'identit√© n¬∞ 123456789
Email: sophie.martin@email.com
T√©l: 06 12 34 56 78

IL A √âT√â CONVENU CE QUI SUIT:

Article 1: OBJET DU CONTRAT
Le pr√©sent contrat a pour objet la location d'un appartement situ√© au:
45 Rue des Roses, 75011 PARIS
Type: F3 - Surface: 65 m¬≤

Article 2: DUR√âE DU BAIL
Le pr√©sent bail est consenti pour une dur√©e de TROIS ANS,
commen√ßant √† courir le 01/06/2023 pour se terminer le 31/05/2026.

Article 3: LOYER ET CHARGES
Le loyer mensuel est fix√© √† 1200 ‚Ç¨ (mille deux cents euros).
Provision sur charges: 150 ‚Ç¨ par mois

Article 4: D√âP√îT DE GARANTIE
Le d√©p√¥t de garantie est fix√© √† la somme de 1200 ‚Ç¨ (un mois de loyer).

Fait √† Paris, le 15/05/2023, en deux exemplaires.

Signature du bailleur:                 Signature du locataire:
P. Durand                              S. Martin
    `,
    metadata: {
      dateSignature: '15/05/2023',
      dateDebut: '01/06/2023',
      dateFin: '31/05/2026',
      loyer: 1200,
      locataire: 'MARTIN Sophie',
      adresse: '45 Rue des Roses, 75011 PARIS',
      signatureBailleur: 'P. Durand',
      signatureLocataire: 'S. Martin'
    }
  },

  // Document 3: Carte d'identit√©
  {
    id: 'doc-003',
    filename: 'carte-identite.pdf',
    title: 'Carte Nationale d\'Identit√©',
    type: 'identit√©',
    content: `
R√âPUBLIQUE FRAN√áAISE
CARTE NATIONALE D'IDENTIT√â

Nom: LAMBERT
Pr√©nom: Marie
N√©(e) le: 23/09/1990
√†: Bordeaux (33)
Taille: 1m68
Sexe: F
Nationalit√©: Fran√ßaise
Date d'√©mission: 14/02/2020
Date d'expiration: 14/02/2030

N¬∞ de carte: 1234567890AB
    `,
    metadata: {
      nom: 'LAMBERT',
      prenom: 'Marie',
      dateNaissance: '23/09/1990',
      lieuNaissance: 'Bordeaux (33)',
      dateEmission: '14/02/2020',
      dateExpiration: '14/02/2030',
      numero: '1234567890AB'
    }
  }
];

/**
 * R√©cup√®re un document mock√© par son ID
 * @param id - Identifiant du document
 * @returns Le document correspondant ou undefined
 */
export function getMockDocumentById(id: string): MockDocument | undefined {
  return MOCK_DOCUMENTS.find(doc => doc.id === id);
}

/**
 * R√©cup√®re tous les documents mock√©s
 * @returns Liste des documents mock√©s
 */
export function getAllMockDocuments(): MockDocument[] {
  return [...MOCK_DOCUMENTS];
}

// Am√©lioration de la fonction extractInfoFromText pour qu'elle fonctionne sans API r√©elle dans le contexte mock
const mockExtractInfoFromText = async (text: string, query: string): Promise<any> => {
  console.log(`üìã Mock extraction: "${query}"`);

  // Normaliser la requ√™te
  const normalizedQuery = query.toLowerCase();

  // R√©sultat par d√©faut
  let result = {
    found: false,
    value: null,
    confidence: 0,
    context: null
  };

  // Recherche d'informations sp√©cifiques bas√©e sur des mots-cl√©s
  if (normalizedQuery.includes('paiement') || normalizedQuery.includes('pay√©') || normalizedQuery.includes('r√©gl√©')) {
    // Rechercher le statut de paiement
    const paymentRegex = /STATUT\s*:\s*(PAY√â|NON PAY√â|EN ATTENTE)/i;
    const match = text.match(paymentRegex);
    if (match) {
      result = {
        found: true,
        value: match[1],
        confidence: 0.95,
        context: text.substring(Math.max(0, match.index - 50), Math.min(text.length, match.index + 100))
      };
    } else if (text.toLowerCase().includes('pay√©')) {
      // Recherche plus g√©n√©rale
      result = {
        found: true,
        value: "PAY√â",
        confidence: 0.85,
        context: "Le document indique que le paiement a √©t√© effectu√©."
      };
    }
  } else if (normalizedQuery.includes('montant') || normalizedQuery.includes('total') || normalizedQuery.includes('somme')) {
    // Rechercher un montant
    const montantRegex = /MONTANT\s*.*?\s*:\s*(\d+[\.,]\d+)\s*‚Ç¨/i;
    const match = text.match(montantRegex) || text.match(/(\d+[\.,]\d+)\s*‚Ç¨/);
    if (match) {
      result = {
        found: true,
        value: match[1].replace(',', '.'),
        confidence: 0.9,
        context: text.substring(Math.max(0, match.index - 50), Math.min(text.length, match.index + 100))
      };
    }
  } else if (normalizedQuery.includes('date') && (normalizedQuery.includes('expiration') || normalizedQuery.includes('validit√©'))) {
    // Rechercher une date d'expiration
    const dateRegex = /Date\s*d['']expiration\s*:\s*(\d{2}\/\d{2}\/\d{4})/i;
    const match = text.match(dateRegex);
    if (match) {
      result = {
        found: true,
        value: match[1],
        confidence: 0.95,
        context: text.substring(Math.max(0, match.index - 50), Math.min(text.length, match.index + 100))
      };
    }
  } else if (normalizedQuery.includes('signature')) {
    // Rechercher une signature
    const signatureRegex = /Signature\s*(du|de la|des)/i;
    const match = text.match(signatureRegex);
    if (match) {
      result = {
        found: true,
        value: "Sign√©",
        confidence: 0.8,
        context: text.substring(Math.max(0, match.index - 50), Math.min(text.length, match.index + 100))
      };
    }
  } else if (normalizedQuery.includes('nom') || normalizedQuery.includes('personne')) {
    // Rechercher un nom
    const nomRegex = /Nom\s*:\s*([A-Z]+)/i;
    const match = text.match(nomRegex);
    if (match) {
      result = {
        found: true,
        value: match[1],
        confidence: 0.9,
        context: text.substring(Math.max(0, match.index - 50), Math.min(text.length, match.index + 100))
      };
    }
  } else if (normalizedQuery.includes('loyer')) {
    // Rechercher un montant de loyer
    const loyerRegex = /loyer\s*.*?\s*:\s*(\d+)\s*‚Ç¨/i;
    const match = text.match(loyerRegex);
    if (match) {
      result = {
        found: true,
        value: match[1],
        confidence: 0.9,
        context: text.substring(Math.max(0, match.index - 50), Math.min(text.length, match.index + 100))
      };
    }
  }

  // Simuler un d√©lai comme pour une API r√©elle
  await new Promise(resolve => setTimeout(resolve, 300));

  return result;
};

/**
 * V√©rifie si une affirmation est valide pour un document donn√©
 * @param documentId - ID du document √† v√©rifier
 * @param query - Affirmation ou question √† v√©rifier
 * @returns R√©sultat de la v√©rification avec explication
 */
export async function verifyMockDocument(documentId: string, query: string): Promise<{
  isValid: boolean;
  reason: string;
  documentInfo: MockDocument | null;
  extractedInfo: Record<string, any>;
}> {
  // R√©cup√©rer le document
  const document = getMockDocumentById(documentId);
  if (!document) {
    return {
      isValid: false,
      reason: "Document introuvable",
      documentInfo: null,
      extractedInfo: {}
    };
  }

  // Normaliser la requ√™te
  const normalizedQuery = query.toLowerCase();

  // Extraire des informations du document en fonction de la requ√™te
  const extractedInfo: Record<string, any> = {};

  // D√©tecter le type de v√©rification demand√©e
  let verificationType: VerificationType | null = null;

  if (normalizedQuery.includes('pay√©') || normalizedQuery.includes('paiement') || normalizedQuery.includes('r√©gl√©')) {
    verificationType = 'paiement';
  } else if (normalizedQuery.includes('expire') || normalizedQuery.includes('expiration') || normalizedQuery.includes('valide jusqu')) {
    verificationType = 'expiration';
  } else if (normalizedQuery.includes('valide') || normalizedQuery.includes('validit√©')) {
    verificationType = 'validit√©';
  } else if (normalizedQuery.includes('montant') || normalizedQuery.includes('somme') || normalizedQuery.includes('co√ªt')) {
    verificationType = 'montant';
  } else if (normalizedQuery.includes('sign√©') || normalizedQuery.includes('signature')) {
    verificationType = 'signature';
  } else if (normalizedQuery.includes('identit√©') || normalizedQuery.includes('personne')) {
    verificationType = 'identit√©';
  }

  // Effectuer une v√©ritable analyse du contenu pour r√©pondre √† la requ√™te
  // en utilisant la fonction mock d'extraction d'information
  try {
    // Extraire l'information pertinente selon le type de v√©rification
    if (verificationType === 'paiement' && document.type === 'facture') {
      const paymentInfo = await mockExtractInfoFromText(document.content, "statut de paiement");
      extractedInfo.paiement = paymentInfo.value || document.metadata.status;
      extractedInfo.datePaiement = document.metadata.datePaiement;

      const isPaid = extractedInfo.paiement?.toLowerCase().includes('pay√©') ||
                     document.content.toLowerCase().includes('pay√©');

      return {
        isValid: isPaid,
        reason: isPaid
          ? `Le document indique que la facture a √©t√© pay√©e le ${extractedInfo.datePaiement}.`
          : "La facture n'a pas √©t√© pay√©e selon les informations du document.",
        documentInfo: document,
        extractedInfo
      };
    }

    if (verificationType === 'montant') {
      let montantInfo = await mockExtractInfoFromText(document.content, "montant");
      if (!montantInfo.found) {
        montantInfo = await mockExtractInfoFromText(document.content, "total");
      }

      extractedInfo.montant = montantInfo.value ||
        (document.type === 'facture' ? document.metadata.montant :
         document.type === 'contrat' ? document.metadata.loyer : null);

      return {
        isValid: extractedInfo.montant !== null,
        reason: extractedInfo.montant
          ? `Le montant indiqu√© dans le document est de ${extractedInfo.montant}‚Ç¨.`
          : "Aucun montant n'a √©t√© trouv√© dans le document.",
        documentInfo: document,
        extractedInfo
      };
    }

    if (verificationType === 'expiration' || verificationType === 'validit√©') {
      let dateInfo = null;

      if (document.type === 'identit√©') {
        dateInfo = await mockExtractInfoFromText(document.content, "date d'expiration");
        extractedInfo.dateExpiration = dateInfo?.value || document.metadata.dateExpiration;

        // V√©rifier si la date d'expiration est dans le futur
        const expDate = new Date(extractedInfo.dateExpiration.split('/').reverse().join('-'));
        const isValid = expDate > new Date();

        return {
          isValid,
          reason: isValid
            ? `Le document est valide jusqu'au ${extractedInfo.dateExpiration}.`
            : `Le document a expir√© le ${extractedInfo.dateExpiration}.`,
          documentInfo: document,
          extractedInfo
        };
      } else if (document.type === 'contrat') {
        dateInfo = await mockExtractInfoFromText(document.content, "date de fin");
        extractedInfo.dateFin = dateInfo?.value || document.metadata.dateFin;

        // V√©rifier si la date de fin est dans le futur
        const endDate = new Date(extractedInfo.dateFin.split('/').reverse().join('-'));
        const isValid = endDate > new Date();

        return {
          isValid,
          reason: isValid
            ? `Le contrat est valide jusqu'au ${extractedInfo.dateFin}.`
            : `Le contrat a expir√© le ${extractedInfo.dateFin}.`,
          documentInfo: document,
          extractedInfo
        };
      }
    }

    if (verificationType === 'signature') {
      let signatureInfo = await mockExtractInfoFromText(document.content, "signature");
      extractedInfo.signed = signatureInfo.found ||
        document.content.toLowerCase().includes('signature') ||
        (document.metadata.signatureBailleur && document.metadata.signatureLocataire);

      return {
        isValid: extractedInfo.signed,
        reason: extractedInfo.signed
          ? "Le document est correctement sign√© par toutes les parties."
          : "Le document ne semble pas √™tre sign√© par toutes les parties requises.",
        documentInfo: document,
        extractedInfo
      };
    }

    if (verificationType === 'identit√©') {
      let nomInfo = await mockExtractInfoFromText(document.content, "nom");
      extractedInfo.nom = nomInfo.value || document.metadata.nom || document.metadata.client || document.metadata.locataire?.split(' ')[1];

      let prenomInfo = await mockExtractInfoFromText(document.content, "pr√©nom");
      extractedInfo.prenom = prenomInfo.value || document.metadata.prenom || document.metadata.locataire?.split(' ')[0];

      const hasIdentityInfo = extractedInfo.nom || extractedInfo.prenom;

      return {
        isValid: hasIdentityInfo,
        reason: hasIdentityInfo
          ? `Le document contient des informations d'identit√© pour ${extractedInfo.prenom || ''} ${extractedInfo.nom || ''}.`
          : "Le document ne contient pas d'informations d'identit√© clairement identifiables.",
        documentInfo: document,
        extractedInfo
      };
    }

    // Si aucune v√©rification sp√©cifique n'est d√©tect√©e, faire une analyse g√©n√©rale
    return {
      isValid: true,
      reason: `Document analys√©: ${document.title}. Aucune v√©rification sp√©cifique demand√©e.`,
      documentInfo: document,
      extractedInfo: { ...document.metadata }
    };

  } catch (error) {
    console.error("Erreur lors de la v√©rification:", error);
    return {
      isValid: false,
      reason: `Erreur lors de l'analyse du document: ${error.message}`,
      documentInfo: document,
      extractedInfo
    };
  }
}